package fr.molotovad79.jeu_d_échecs.pièce;

public class Reine extends Pièce implements FonctionPièces,Echec_Roi {

	private Reine[][] posQ=(Reine[][]) getPosPièce();
	public Reine(CouleurPièce coulPièce,String initiale,Pièce[][] posPièce) {
		super(coulPièce, "Q",posPièce);
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public void manger(Pièce p) {
		int xReine=reine().getX(),yReine=reine().getY();
		Pièce[][] pos= getPosPièce();
		//pos[x][y]=pos[p1().getX()][p1().getY()];
		while((/*EST ET OUEST */posQ[p.getX()][yReine]==pos[p.getX()][p.getY()] ||
				 /*NORD ET SUD*/ posQ[xReine][p.getY()]==pos[p.getX()][p.getY()] ||
				/*Direction NORD-EST*/posQ[xReine+(p.getX()-xReine)][yReine+(p.getY()-yReine)]==pos[p.getX()][p.getY()] ||
				/*Direction SUD-OUEST*/ posQ[xReine-(xReine-p.getX())][yReine-(yReine-p.getY())]==pos[p.getX()][p.getY()] ||
				/*Direction NORD-OUEST*/posQ[xReine-(xReine-p.getX())][yReine+(p.getY()-yReine)]==pos[p.getX()][p.getY()]||
				/*Direction SUD-EST*/posQ[xReine+(p.getX()-xReine)][yReine-(yReine-p.getY())]==pos[p.getX()][p.getY()])
				&& p!=null && p!=roi() && pos[p.getX()][p.getY()]!=pos[getX()][getY()]
				&& pos[p.getX()][p.getY()]!=pos[getX()][getY()]) {
			for(int i=xReine+1;i<=p.getX()-1;i++) {
				for(int j=yReine+1;j<=p.getY()-1;j++) {
					for(int d=xReine-1;d>=p.getX()-1;d--) {
						for(int k=yReine-1;k>=p.getY()-1;k--) {
							if(/*EST*/posQ[i][yReine]==pos[p2().getX()][p2().getY()]  
								||/*NORD*/ posQ[xReine][j]==pos[p2().getX()][p2().getY()]
								||/*OUEST*/posQ[d][yReine]==pos[p2().getX()][p2().getY()]
								||/*SUD*/posQ[xReine][k]==pos[p2().getX()][p2().getY()] 
								||/*NORD-EST*/posQ[i][j]==pos[p2().getX()][p2().getY()] 
								|| /*NORD-OUEST*/posQ[d][j]==pos[p2().getX()][p2().getY()] 
								|| /*SUD-EST*/posQ[i][k]==pos[p2().getX()][p2().getY()] 
								||/*SUD-OUEST*/posQ[d][j]==pos[p2().getX()][p2().getY()] ){
								System.out.println("Tu ne peux manger dans cette direction si une pièce s'interpose"
										+ "dans ton chemin ! Tu peux la manger cette pièce qui te gène aussi ^^");
							}else {
								
								
								//Démarche pour manger une pièce. S'en inspirer pour 
								//toutes les autres méthodes.
								
								reine().setInitiale(null);
								posQ[xReine][yReine]=(Reine) pos[p.getX()][p.getY()];
								reine().setPosPièce(pos);
								p.setInitiale(null);
								cimetiere().ajouter_cimetière(p); 
								cimetiere().setNbPièces(cimetiere().getNbPièces()+1);
								
								
								if (p.getCoulPièce().equals(CouleurPièce.BLANC)==true) {
									reine().setInitiale("QN");
								}
								else if(p.getCoulPièce().equals(CouleurPièce.NOIR)==true) {
									reine().setInitiale("QB");
								}
								
								p.equals(null);
							}//if else	
						}// 4ème for
					}//3ème for	
				} //2ème for
			} // 1er for		
		}// While
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public void bouger(int x, int y) {
		int xReine=reine().getX(),yReine=reine().getY();
		Pièce[][] pos= getPosPièce();
		Pièce [][] pos2=getPosPièce();
		while((/*EST ET OUEST */posQ[x][yReine]==pos2[x][y] ||
				 /*NORD ET SUD*/ posQ[xReine][y]==pos2[x][y] ||
				/*Direction NORD-EST*/posQ[xReine+(x-xReine)][yReine+(y-yReine)]==pos2[x][y] ||
				/*Direction SUD-OUEST*/ posQ[xReine-(xReine-x)][yReine-(yReine-y)]==pos2[x][y] ||
				/*Direction NORD-OUEST*/posQ[xReine-(xReine-x)][yReine+(y-yReine)]==pos2[x][y]||
				/*Direction SUD-EST*/posQ[xReine+(x-xReine)][yReine-(yReine-y)]==pos2[x][y])
				&& (pos2[x][y]!=pos[p1().getX()][p1().getY()]||pos2[x][y]!=pos[p2().getX()][p2().getY()])) {
			
			for(int i=xReine+1;i<=x;i++) {
				for(int j=yReine+1;j<=y;j++) {
					for(int d=xReine-1;d>=x;d--) {
						for(int k=yReine-1;k>=y;k--) {
							if(/*EST*/posQ[i][yReine]!= pos[p1().getX()][p1().getY()]
								||/*NORD*/ posQ[xReine][j]!=pos[p1().getX()][p1().getY()]
								||/*OUEST*/posQ[d][yReine]!=pos[p1().getX()][p1().getY()]
								||/*SUD*/posQ[xReine][k]!= pos[p1().getX()][p1().getY()]
								||/*NORD-EST*/posQ[i][j]!= pos[p1().getX()][p1().getY()]
								|| /*NORD-OUEST*/posQ[d][j]!=pos[p1().getX()][p1().getY()]
								|| /*SUD-EST*/posQ[i][k]!=pos[p1().getX()][p1().getY()]
								||/*SUD-OUEST*/posQ[d][j]!=pos[p1().getX()][p1().getY()]){
								reine().setInitiale(null);
								posQ[xReine][yReine]=(Reine) pos2[x][y];
								reine().setPosPièce(posQ);
								reine().setInitiale("Q");
								
							}else {
								System.out.println("Tu ne peux pas bouger sur une pièce !");
				
							}//if else	
						}// 4ème for
					}//3ème for	
				} //2ème for
			} // 1er for	
		}
		//&& pos[x][y]!=pos[p1().getX()][p1().getY()]
		
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public boolean mettre_en_échec(Roi r) {
		int posX=reine().getX(), posY=reine().getY();
		
		for (int i = 0; i < posX; i++) { //vérifier en horizontal à gauche de la dame
			for (int j = posX+1; j <8 ; j++) { //vérifier en horizontal à droite de la dame
				for (int d = 0;  d < posY; d++) { //vérifier en verticale en bas de la dame
					for (int k = posY+1; k < 8; k++) { //vérifier en vertical en haut de la dame
						
						for (int i2 = 0; i2 < posX; i2++) { //
							
						}
						
					}
				}
			}
		}
		
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

}
