package fr.molotovad79.jeu_d_échecs.pièce;

public class Cavalier extends Pièce implements FonctionPièces,Echec_Roi{
	private int numéro;
	private Cavalier[][] posCH=(Cavalier[][]) getPosPièce();
	
	public Cavalier(CouleurPièce coulPièce,String initiale,Pièce [][] posPièce,int numéro) {
		super(coulPièce, initiale,posPièce);
		this.numéro=numéro;
	}

	@Override
	public void manger(Pièce p) {
		int xCavalier=cavalier().getX(),yCavalier=cavalier().getY();
		Pièce[][] pos= p.getPosPièce();
//		pos[x][y]=pos[getX()][getY()];
		while(posCH[xCavalier+1][yCavalier-2]==pos[p.getX()][p.getY()] || posCH[xCavalier-1][yCavalier-2]==pos[p.getX()][p.getY()] 
				||posCH[xCavalier-2][yCavalier-1]==pos[p.getX()][p.getY()] || posCH[xCavalier-2][yCavalier+1]==pos[p.getX()][p.getY()]
				||posCH[xCavalier-1][yCavalier+2]==pos[p.getX()][p.getY()] || posCH[xCavalier+1][yCavalier+2]==pos[p.getX()][p.getY()]
				||posCH[xCavalier+2][yCavalier+1]==pos[p.getX()][p.getY()] || posCH[xCavalier+2][yCavalier-1]==pos[p.getX()][p.getY()]
				&& p!=null && p!=roi()) {
			//Le cavalier est la seule pièce qui peut sauter au dessus des autres pièces. Le while suffit
			cavalier().setInitiale("");
			posCH[xCavalier][yCavalier]=(Cavalier) pos[p.getX()][p.getY()];
			cavalier().setPosPièce(pos);
			p.setInitiale("");
			cimetiere().ajouter_cimetière(p); 
			cimetiere().setNbPièces(cimetiere().getNbPièces()+1);
			
			if (p.getCoulPièce().equals(CouleurPièce.BLANC)==true) {
				cavalier().setInitiale("CH "+cavalier().getCoulPièce().name()+cavalier().getNuméro());
			}
			else if(p.getCoulPièce().equals(CouleurPièce.NOIR)==true) {
				cavalier().setInitiale("CH "+cavalier().getCoulPièce().name()+cavalier().getNuméro());
			}
			
			p.equals(null);
			
			//vérifier que le cavalier met en échec ou pas le roi.
			
			int xRoi=roi().getX(),yRoi=roi().getY();
			Pièce[][] posR= roi().getPosPièce();
			
			//Si le cavalier est en mesure de mettre en échec le roi !
			if ((posCH[xCavalier+1][yCavalier-2]==posR[xRoi][yRoi] || posCH[xCavalier-1][yCavalier-2]==posR[xRoi][yRoi] 
				||posCH[xCavalier-2][yCavalier-1]==posR[xRoi][yRoi] || posCH[xCavalier-2][yCavalier+1]==posR[xRoi][yRoi]
				||posCH[xCavalier-1][yCavalier+2]==posR[xRoi][yRoi] || posCH[xCavalier+1][yCavalier+2]==posR[xRoi][yRoi]
				||posCH[xCavalier+2][yCavalier+1]==posR[xRoi][yRoi] || posCH[xCavalier+2][yCavalier-1]==posR[xRoi][yRoi])
				
			&&roi().getCoulPièce().name().equals(cavalier().getCoulPièce().name())==false && posR!=pos) {
				
				roi().setest_en_échec(true);
				System.out.println("Roi "+roi().getCoulPièce().name()+" en danger, faut vite bouger !");
				
			}
			
		}
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public void bouger(int x, int y) {
		int xCavalier=cavalier().getX(),yCavalier=cavalier().getY();
		Pièce[][] pos= getPosPièce();
		pos[x][y]=pos[p1().getX()][p1().getY()];
		while(pos[xCavalier+1][yCavalier-2]==pos[x][y] ||pos[xCavalier-1][yCavalier-2]==pos[x][y] 
				||pos[xCavalier-2][yCavalier-1]==pos[x][y]||pos[xCavalier-2][yCavalier+1]==pos[x][y]
				||pos[xCavalier-1][yCavalier+2]==pos[x][y]||pos[xCavalier+1][yCavalier+2]==pos[x][y]
				||pos[xCavalier+2][yCavalier+1]==pos[x][y]||pos[xCavalier+2][yCavalier-1]==pos[x][y]
				 && pos[x][y]!=p1()&& pos[x][y]!=p2()) {
		
		}
		
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public boolean mettre_en_échec(Roi r) {
		
	}

	public int getNuméro() {
		return numéro;
	}

	public void setNuméro(int numéro) {
		this.numéro = numéro;
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	
}
