package fr.molotovad79.jeu_d_échecs.pièce;
import java.util.Scanner;

public class Pion extends Pièce implements FonctionPièces,Echec_Roi{
	private Scanner sc=new Scanner(System.in);
	private int nb_move;
	private int numéro;
	private Pion[][] posP=(Pion[][]) getPosPièce();
	
	public Pion(CouleurPièce coulPièce,String initiale,Pièce[][] posPièce,int numéro) {
		super(coulPièce, initiale,posPièce);
		this.nb_move=0;
		this.numéro=numéro;
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public void manger(Pièce p) { //méthode validée
		int xPion=pion().getX(),yPion=pion().getY();
		Pièce[][] pos= getPosPièce();
		while(((posP[xPion-1][yPion+1]==pos[p.getX()][p.getY()] || posP[xPion+1][yPion+1]==pos[p.getX()][p.getY()]) 
				&& pion().getCoulPièce().equals(CouleurPièce.BLANC)==true)
				
				||((posP[xPion-1][yPion-1]==pos[p.getX()][p.getY()] || posP[xPion+1][yPion-1]==pos[p.getX()][p.getY()])
				&& pion().getCoulPièce().equals(CouleurPièce.NOIR)==true) 
				
				&& p!=null) {
			
				p.setInitiale("");
				cimetiere().ajouter_cimetière(p);	
				cimetiere().setNbPièces(cimetiere().getNbPièces()+1);
				pion().setInitiale("");
				posP[xPion][yPion]=(Pion) pos[p.getX()][p.getY()];
				pion().setPosPièce(pos);
				
				
			if (p.getCoulPièce().equals(CouleurPièce.BLANC)==true) {
				pion().setInitiale("P "+pion().getCoulPièce().name()+pion().getNuméro());
			}
			else if(p.getCoulPièce().equals(CouleurPièce.NOIR)==true) {
				pion().setInitiale("P "+pion().getCoulPièce().name()+pion().getNuméro());
			}
			p.equals(null);
		}
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public void bouger(int x, int y) {
		int xPion=pion().getX(),yPion=pion().getY();
		Pièce[][] pos= getPosPièce();
		pos[x][y]=null;
	
		while((pos[xPion][yPion+1]==pos[x][y] && pion().getCoulPièce()==CouleurPièce.BLANC)
			||(pos[xPion][yPion-1]==pos[x][y] && pion().getCoulPièce()==CouleurPièce.NOIR) 
				&& p1().getPosPièce()!=pos&& p2()==null) {
			if(nb_move==0) {
				System.out.println("Veux tu te déplacer de 2 cases ? (O/N)");
				String réponse=sc.nextLine();
				if((réponse=="o" ||réponse=="O")&& pion().getCoulPièce()==CouleurPièce.BLANC) {
					pion().setInitiale(null);
					pos[xPion][yPion]=pos[x][y+1];
					pion().setPosPièce(pos);
					pion().setInitiale("P");
					nb_move++;
				}else if((réponse=="o" ||réponse=="O")&& pion().getCoulPièce()==CouleurPièce.NOIR) {
					pion().setInitiale(null);
					pos[xPion][yPion]=pos[x][y-1];
					pion().setPosPièce(pos);
					pion().setInitiale("P");
					nb_move++;
				}else if(réponse=="n" ||réponse=="N") {
					pion().setInitiale(null);
					pos[xPion][yPion]=pos[x][y];
					pion().setPosPièce(pos);
					pion().setInitiale("P");
				}
			}else {
				pion().setInitiale(null);
				pos[xPion][yPion]=pos[x][y];
				pion().setPosPièce(pos);
				pion().setInitiale("P");
				nb_move++;
			}
			
		}
		
	}
	
	/*
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * ******************************************************************************************************************************************************
	 * */	

	@Override
	public boolean mettre_en_échec(Roi r) { //méthode réglée
		int xPion=pion().getX(),yPion=pion().getY();
		Pièce[][] pos= getPosPièce();
		//pion blanc
		if( ((pos[xPion-1][yPion+1]==pos[roi().getX()][roi().getY()] ||pos[xPion+1][yPion+1]==pos[roi().getX()][roi().getY()]) &&
				 pion().getCoulPièce()==CouleurPièce.BLANC && roi().getCoulPièce()==CouleurPièce.NOIR)
				
				//Pion noir
				|| ((pos[xPion-1][yPion-1]==pos[roi().getX()][roi().getY()] || pos[xPion+1][yPion-1]==pos[roi().getX()][roi().getY()]) && 
						pion().getCoulPièce()==CouleurPièce.NOIR && roi().getCoulPièce()==CouleurPièce.BLANC) ) {
			//Le roi est en échec !
			roi().setest_en_échec(true);
			return roi().est_en_échec();
		}else
			return !roi().est_en_échec();
		
	}

	/**
	 * @return the numéro
	 */
	public int getNuméro() {
		return numéro;
	}

	/**
	 * @param numéro the numéro to set
	 */
	public void setNuméro(int numéro) {
		this.numéro = numéro;
	}

}
